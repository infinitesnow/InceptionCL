#include <CL/sycl.hpp>
#include <convolution.hpp>

void init_boost()
{
    logging::core::get()->set_filter
    (
        logging::trivial::severity >= logging::trivial::trace
    );
};

int main(){
  // Let's initialize Boost logging system
  init_boost();

  BOOST_LOG_TRIVIAL(trace) << "Starting main";

  // Define input parameters
  const size_t input_width = 14;
  const size_t input_height = 14;
  const size_t input_depth = 3;
  const short stride=1;
  const int bias = 0;
  const int num11=128;
  const int num33reduce=128;
  const int num33=256;
  const int num55reduce=24;
  const int num55=64;
  const int poolproj=64; 
  
  // Create a random input volume
  Volume input_volume(range<3>(input_width,input_height,input_depth));
  initialize_volume(input_volume, true, 255);
  print_volume(input_volume);
  
  /* 
   * Let's create the components of the Inception module. For each volume,
   * we first create a convolver object; weights are generated by a stub method.
   * Then, we apply the convolution/pool. 
  */
  Volume tmp;
  
  Volume vol1;
  Weights weights_1 = generate_stub_weights(1,input_depth,5);
  convolver c11_1(weights_1,stride,bias);
  vol1=c11_1.convolve(input_volume);
  print_volume(vol1);

  Volume vol2;
  Weights weights_2_11 = generate_stub_weights(1,input_depth,5);
  convolver c11_2(weights_2_11,stride,bias);
  tmp = c11_2.convolve(input_volume);
  print_volume(tmp);
  Weights weights_2_33 = generate_stub_weights(3,5,3);
  convolver c33_2(weights_2_33,stride,bias);
  vol2=c33_2.convolve(tmp);
  
  Volume vol3;
  Weights weights_3_11 = generate_stub_weights(1,input_depth,2);
  convolver c11_3(weights_3_11,stride,bias);
  tmp = c11_3.convolve(input_volume);
  Weights weights_3_55 = generate_stub_weights(2,2,6);
  convolver c55_3(weights_3_55,stride,bias);
  vol3=c55_3.convolve(tmp);
  
  Volume vol4;
  convolver p33_4(3,1);
  tmp = p33_4.pool(input_volume);
  Weights weights_4 = generate_stub_weights(1,input_depth,5);
  convolver c11_4(weights_4,stride,bias);
  vol4=c11_4.convolve(tmp);

  
  Volume output = concatenate_volumes(Weights{vol1,vol2,vol3,vol4});
  print_volume(output);
  
  std::cout << "Finished." << std::endl;
  return 0;
};
